Question 1:
What happens when you initialize a repository?
Why do you need to do it?

When a repository is initialized a new folder .git is created. 
The repository, however, is empty and no filder are related
to it. You have to initialized a git repository
in order to start using git, duh.

Question 3:
How is the staging area different from the working
directory and the repository? What value do you think it offers?

In the staging area you can put files its changes you would
like to keep track off. Once all the files you would like to
put to one commit, you commit the changes of the files in 
the staging area. It can be regarded as an intermediate state
in order set up a commit. For example, if you finished a 
logical step containing changes in two different files, you
can use the staging area to put all the changes related to 
the logical step in the two files into one commit, as it is
recommended.

Question 4:
How can you use the staging area to make sure you have one commit per logical change?

You can use the staging area to add all the files related to
complete a logical change are put to one commit.

Question 5:
What are some situations when branches would be helpful in
keeping your history organized? How would branches help?

Branches allow to persue different routes in the developement
of the program, for example adding a new experimental feature.

Question 6:
How do the diagrams help you visualize the branch structure?

Diagrams show all the commits and how they related to former commits.
The branch structure shown helps to identify at which point
a new branch was created.

Question 7:
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

All the commits of the two branches will be combined. Git will
take the origin of the two branches as the reference in order
to decide which changes from both branches to keep. The label 
of the currently checked out branch will be kept. After merging
you will see all the commits sorted by timestamp in the git log
output. In order to display the changes of commit with respect
to its parent commit, simply use git show id. The label of the 
second, merged branch can be deleted: git branch -d label. This
will only delete the label and not the commits.

Question 8:
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Pros are that if the changes in two branches do not effect each other
it is very fast and efficient to use the automatic merging. If two changes effect each other then one has to manually sort out which change
should be kept.